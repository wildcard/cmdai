name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
        exclude:
          # Reduce CI load - only test beta on Ubuntu
          - os: macos-latest
            rust: beta
          - os: windows-latest
            rust: beta

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Build tests
      run: cargo test --no-run --verbose --all-features
    
    - name: Run tests (TDD - failures expected)
      run: cargo test --verbose --all-features || true
      continue-on-error: true
    
    - name: Check test compilation
      run: |
        echo "Tests compiled successfully. TDD tests are expected to fail at this stage."
        cargo test --no-run --test "*contract*" --verbose
        cargo test --no-run --test "*integration*" --verbose

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit

  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: cmdai-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: cmdai-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: cmdai-macos-intel
          - os: macos-latest
            target: aarch64-apple-darwin
            name: cmdai-macos-silicon
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: cmdai-windows-amd64.exe

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross (for cross-compilation)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: cargo install cross
    
    - name: Build release binary
      run: |
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi
      shell: bash
    
    - name: Create artifact
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          cp target/${{ matrix.target }}/release/cmdai.exe ${{ matrix.name }}
        else
          cp target/${{ matrix.target }}/release/cmdai ${{ matrix.name }}
        fi
      shell: bash
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build benchmarks
      run: cargo bench --no-run --verbose
      
    - name: Run benchmarks (TDD - may fail)
      run: cargo bench --verbose || echo "Benchmarks may fail during TDD phase"
      continue-on-error: true
    
    - name: Check binary size
      run: |
        cargo build --release
        ls -la target/release/cmdai
        SIZE=$(stat -f%z target/release/cmdai 2>/dev/null || stat -c%s target/release/cmdai)
        echo "Binary size: $SIZE bytes"
        # Fail if binary is larger than 50MB (52,428,800 bytes)
        if [ $SIZE -gt 52428800 ]; then
          echo "❌ Binary size ($SIZE bytes) exceeds 50MB limit"
          exit 1
        else
          echo "✅ Binary size ($SIZE bytes) is within 50MB limit"
        fi

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov
    
    - name: Generate coverage report
      run: cargo llvm-cov --all-features --lcov --output-path lcov.info
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: lcov.info
        fail_ci_if_error: true