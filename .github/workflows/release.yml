name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: cmdai v${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, 'alpha') || contains(steps.get_version.outputs.VERSION, 'beta') || contains(steps.get_version.outputs.VERSION, 'rc') }}

  build-and-upload:
    name: Build and Upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: cmdai-v${{ needs.create-release.outputs.version }}-linux-amd64
            asset_name: cmdai-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: cmdai-v${{ needs.create-release.outputs.version }}-linux-arm64
            asset_name: cmdai-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: cmdai-v${{ needs.create-release.outputs.version }}-macos-intel
            asset_name: cmdai-macos-intel
          - os: macos-latest
            target: aarch64-apple-darwin
            name: cmdai-v${{ needs.create-release.outputs.version }}-macos-silicon
            asset_name: cmdai-macos-silicon
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: cmdai-v${{ needs.create-release.outputs.version }}-windows-amd64.exe
            asset_name: cmdai-windows-amd64.exe

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross (for cross-compilation)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: cargo install cross
    
    - name: Build release binary
      run: |
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi
      shell: bash
    
    - name: Create release package
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          cp target/${{ matrix.target }}/release/cmdai.exe ${{ matrix.name }}
        else
          cp target/${{ matrix.target }}/release/cmdai ${{ matrix.name }}
          chmod +x ${{ matrix.name }}
        fi
      shell: bash
    
    - name: Generate checksums
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          certUtil -hashfile ${{ matrix.name }} SHA256 > ${{ matrix.name }}.sha256
        else
          shasum -a 256 ${{ matrix.name }} > ${{ matrix.name }}.sha256
        fi
      shell: bash
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream
    
    - name: Upload Checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.name }}.sha256
        asset_name: ${{ matrix.asset_name }}.sha256
        asset_content_type: text/plain

  publish-crate:
    name: Publish to crates.io
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_TOKEN }}
      continue-on-error: true  # Allow failure if already published